import discord
import typing as t
import wavelink
from discord.ext import commands
from core.classes import Cog_Extension

class AlreadyConnectedToChannel(commands.CommandError):
    pass

class NoVoiceChannel(commands.CommandError):
    pass


class Player(wavelink.Player):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
    async def connect(self, ctx, channel=None):
        if self.is_connected():
            raise AlreadyConnectedToChannel

        channel = getattr(ctx.author.voice, "channel", channel)
        if channel is None:
            raise NoVoiceChannel

        await super().connect(channel.id)
        return channel


    async def teardown(self):
        try:
            await self.destroy()
        except KeyError:
            pass


class Music(Cog_Extension, wavelink.WavelinkMixin):
    def __init__(self, bot):
        self.bot = bot 
        self.wavelink = wavelink.Client(bot=bot)
        self.bot.loop.create_task(self.start_nodes())
        
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        if not member.bot and after.channel is None:
            if not [m for m in before.channel.members if not m.bot]:
                await self.get_player(members.guild).teardown()

    @wavelink.WavelinkMixin.listener()
    async def on_node_ready(self, node):
        print(f'Wavelink node `{node.identifier}` ready.')
        
    async def cog_check(self, ctx):
        if isinstance(ctx.channel, discord.DMChannel):
            await ctx.send("Music commands are not available in DMs.")
            return False
        
        return True

    async def start_nodes(self):
        await self.bot.wait_until_ready()

        nodes = {
            "MAIN":{
                "host": "127.0.0.1",
                "port": 2333,
                "rest_uri": "http://127.0.0.1:2333",
                "password": "youshallnotpass",
                "identifier": "MAIN",
                "region": "europe",
            }
        }

        for node in nodes.values():
            await self.wavelink.initiate_node(**node)

    def get_player(self, obj):
        if isinstance(obj, commands.content):
            return self.wavelink.get_player(obj.guild.id, cls=Player, content=obj)
        elif isinstance(obj, discord.guild):
            return self.wavelink.get_player(obj.id, cls=Player)

    @commands.command(name='connect', aliases=['join'])
    async def connect_command(self, ctx, *, channel: t.Optional[discord.VoiceChannel]):
        player = self.get_player(ctx)
        channel = await player.connect(ctx, channel)
        await ctx.send("Connected to {channel.name}.")

    # @connect_command.error
    # async def connect_command_error(self, ctx, exc):
    #     if isinstance(exc, AlreadyConnectedToChannel):
    #         await ctx.send("已經在頻道裡了!")
    #     elif isinstance(exc, NoVoiceChannel):
    #         await ctx.send("你不在頻道內!")

    @commands.command(name='disconnect', aliases=['leave'])
    async def  disconnect_command(self, ctx):
        player = self.get_player(ctx)
        await player.teardown()
        await ctx.send("中斷連結...")


def setup(bot):
    bot.add_cog(Music(bot))
